/* DO NOT EDIT THIS FILE - IT IS MACHINE GENERATED */

#ifdef _WIN32
    #define _JAVASOFT_JNI_MD_H_

    #define JNIEXPORT __declspec(dllexport)
    #define JNIIMPORT __declspec(dllimport)
    #define JNICALL __stdcall

    typedef int jint;
    typedef long long jlong;
    typedef signed char jbyte;
#endif
#include <jni.h>
#ifdef ANDROID
    #include <android/log.h>
    #define NewWeakGlobalRef(o) NewGlobalRef(o)
    #define DeleteWeakGlobalRef(o) DeleteGlobalRef(o)
#endif

#include <thrust/device_vector.h>
#include <thrust/transform.h>
#include <thrust/sequence.h>
#include <thrust/copy.h>
#include <thrust/fill.h>
#include <thrust/replace.h>
#include <thrust/functional.h>
#include "/host/Keldysh/prj/Scalan-v2/tmp/fun.cu"

#include <stddef.h>
#ifndef _WIN32
    #include <stdint.h>
#endif
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <exception>
#include <vector>

#define jlong_to_ptr(a) ((void*)(uintptr_t)(a))
#define ptr_to_jlong(a) ((jlong)(uintptr_t)(a))

#if defined(_MSC_VER)
    #define noinline __declspec(noinline)
#elif defined(__GNUC__)
    #define noinline __attribute__((noinline))
#else
    #define noinline
#endif



static void JavaCPP_gpugen_ThrustLib_00024TupleIntInt_deallocate(thrust::tuple<int, int>* address) { delete address; }
static void JavaCPP_gpugen_ThrustLib_00024DeviceVectorPointer_deallocate(thrust::device_vector<int>* address) { delete address; }
static void JavaCPP_com_googlecode_javacpp_BytePointer_deallocateArray(signed char* address) { delete[] address; }
static void JavaCPP_com_googlecode_javacpp_ShortPointer_deallocateArray(short* address) { delete[] address; }
static void JavaCPP_com_googlecode_javacpp_IntPointer_deallocateArray(int* address) { delete[] address; }
static void JavaCPP_com_googlecode_javacpp_LongPointer_deallocateArray(jlong* address) { delete[] address; }
static void JavaCPP_com_googlecode_javacpp_FloatPointer_deallocateArray(float* address) { delete[] address; }
static void JavaCPP_com_googlecode_javacpp_DoublePointer_deallocateArray(double* address) { delete[] address; }
static void JavaCPP_com_googlecode_javacpp_CharPointer_deallocateArray(unsigned short* address) { delete[] address; }
static void JavaCPP_com_googlecode_javacpp_PointerPointer_deallocateArray(void** address) { delete[] address; }
static void JavaCPP_com_googlecode_javacpp_BoolPointer_deallocateArray(bool* address) { delete[] address; }
static void JavaCPP_com_googlecode_javacpp_CLongPointer_deallocateArray(long* address) { delete[] address; }
static void JavaCPP_com_googlecode_javacpp_SizeTPointer_deallocateArray(size_t* address) { delete[] address; }

static JavaVM* JavaCPP_vm = NULL;
static const char* JavaCPP_classNames[17] = {
        "java/lang/RuntimeException",
        "java/lang/NullPointerException",
        "com/googlecode/javacpp/Loader",
        "com/googlecode/javacpp/Pointer",
        "com/googlecode/javacpp/BytePointer",
        "com/googlecode/javacpp/ShortPointer",
        "com/googlecode/javacpp/IntPointer",
        "com/googlecode/javacpp/LongPointer",
        "com/googlecode/javacpp/FloatPointer",
        "com/googlecode/javacpp/DoublePointer",
        "com/googlecode/javacpp/CharPointer",
        "com/googlecode/javacpp/PointerPointer",
        "com/googlecode/javacpp/BoolPointer",
        "com/googlecode/javacpp/CLongPointer",
        "com/googlecode/javacpp/SizeTPointer",
        "gpugen/ThrustLib$TupleIntInt",
        "gpugen/ThrustLib$DeviceVectorPointer" };
static jclass JavaCPP_classes[17] = { NULL };
static jmethodID JavaCPP_initMethodID = NULL;
static jfieldID JavaCPP_addressFieldID = NULL;
static jfieldID JavaCPP_positionFieldID = NULL;
static jfieldID JavaCPP_capacityFieldID = NULL;

static inline void JavaCPP_log(const char* format, ...) {
   va_list ap;
   va_start(ap, format);
#ifdef ANDROID
    __android_log_print(ANDROID_LOG_ERROR, "javacpp", format, ap);
#else
    fprintf(stderr, format, ap);
#endif
    va_end(ap);
}

static noinline jclass JavaCPP_getClass(JNIEnv* e, int i) {
    if (JavaCPP_classes[i] == NULL && e->PushLocalFrame(1) == 0) {
        jclass c = e->FindClass(JavaCPP_classNames[i]);
        if (c == NULL || e->ExceptionCheck()) {
            JavaCPP_log("Error loading class %s.", JavaCPP_classNames[i]);
            return NULL;
        }
        JavaCPP_classes[i] = (jclass)e->NewWeakGlobalRef(c);
        if (JavaCPP_classes[i] == NULL || e->ExceptionCheck()) {
            JavaCPP_log("Error creating global reference of class %s.", JavaCPP_classNames[i]);
            return NULL;
        }
        e->PopLocalFrame(NULL);
    }
    return JavaCPP_classes[i];
}

static noinline void JavaCPP_handleException(JNIEnv* e) {
    try {
        throw;
    } catch (std::exception& ex) {
        e->ThrowNew(JavaCPP_getClass(e, 0), ex.what());
    } catch (...) {
        e->ThrowNew(JavaCPP_getClass(e, 0), "Unknown exception.");
    }
}

template <class P> static inline P JavaCPP_dereference(JNIEnv* e, P* pointer) {
    if (pointer == NULL) {
        e->ThrowNew(JavaCPP_getClass(e, 1), "Return pointer address is NULL.");
        return P();
    }
    return *pointer;
}

template<class P, class T = P> class VectorAdapter {
public:
    VectorAdapter(P* pointer, typename std::vector<T>::size_type capacity) : pointer(pointer), capacity(capacity),
        vec2(pointer ? std::vector<T>(pointer, pointer + capacity) : std::vector<T>()), vec(vec2) { }
    VectorAdapter(const std::vector<T>& vec) : pointer(0), capacity(0), vec((std::vector<T>&)vec) { }
    void assign(P* pointer, typename std::vector<T>::size_type capacity) {
        this->pointer = pointer;
        this->capacity = capacity;
        vec.assign(pointer, pointer + capacity);
    }
    static void deallocate(P* pointer) { delete[] pointer; }
    operator P*() {
        if (vec.size() > capacity) {
            pointer = new P[vec.size()];
            capacity = vec.size();
        }
        if (pointer) {
            std::copy(vec.begin(), vec.end(), pointer);
        }
        return pointer;
    }
    operator const P*()        { return &vec[0]; }
    operator std::vector<T>&() { return vec; }
    operator std::vector<T>*() { return pointer ? &vec : 0; }
    P* pointer;
    typename std::vector<T>::size_type capacity;
    std::vector<T> vec2;
    std::vector<T>& vec;
};

extern "C" {

JNIEXPORT jint JNICALL JNI_OnLoad(JavaVM* vm, void* reserved) {
    JNIEnv* e;
    if (vm->GetEnv((void**)&e, JNI_VERSION_1_6) != JNI_OK) {
        JavaCPP_log("Could not get JNIEnv for JNI_VERSION_1_6 inside JNI_OnLoad().");
        return 0;
    }
    if (JavaCPP_vm == vm) {
        return e->GetVersion();
    }
    JavaCPP_vm = vm;
    const char* members[17][1] = {
            {  },
            {  },
            {  },
            { "sizeof" },
            { "sizeof" },
            { "sizeof" },
            { "sizeof" },
            { "sizeof" },
            { "sizeof" },
            { "sizeof" },
            { "sizeof" },
            { "sizeof" },
            { "sizeof" },
            { "sizeof" },
            { "sizeof" },
            { "sizeof" },
            { "sizeof" } };
    int offsets[17][1] = {
            {  },
            {  },
            {  },
            { sizeof(void*) },
            { sizeof(signed char) },
            { sizeof(short) },
            { sizeof(int) },
            { sizeof(jlong) },
            { sizeof(float) },
            { sizeof(double) },
            { sizeof(unsigned short) },
            { sizeof(void*) },
            { sizeof(bool) },
            { sizeof(long) },
            { sizeof(size_t) },
            { sizeof(thrust::tuple<int, int>) },
            { sizeof(thrust::device_vector<int>) } };
    int memberOffsetSizes[17] = { 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    jmethodID putMemberOffsetMethodID = e->GetStaticMethodID(JavaCPP_getClass(e, 2), "putMemberOffset", "(Ljava/lang/String;Ljava/lang/String;I)V");
    if (putMemberOffsetMethodID == NULL || e->ExceptionCheck()) {
        JavaCPP_log("Error getting putMemberOffset method ID of Loader class.");
        return 0;
    }
    for (int i = 0; i < 17 && !e->ExceptionCheck(); i++) {
        for (int j = 0; j < memberOffsetSizes[i] && !e->ExceptionCheck(); j++) {
            if (e->PushLocalFrame(2) == 0) {
                jvalue args[3];
                args[0].l = e->NewStringUTF(JavaCPP_classNames[i]);
                args[1].l = e->NewStringUTF(members[i][j]);
                args[2].i = offsets[i][j];
                e->CallStaticVoidMethodA(JavaCPP_getClass(e, 2), putMemberOffsetMethodID, args);
                e->PopLocalFrame(NULL);
            }
        }
    }
    JavaCPP_initMethodID = e->GetMethodID(JavaCPP_getClass(e, 3), "init", "(JIJ)V");
    if (JavaCPP_initMethodID == NULL || e->ExceptionCheck()) {
        JavaCPP_log("Error getting init method ID of Pointer class.");
        return 0;
    }
    JavaCPP_addressFieldID = e->GetFieldID(JavaCPP_getClass(e, 3), "address", "J");
    if (JavaCPP_addressFieldID == NULL || e->ExceptionCheck()) {
        JavaCPP_log("Error getting address field ID of Pointer class.");
        return 0;
    }
    JavaCPP_positionFieldID = e->GetFieldID(JavaCPP_getClass(e, 3), "position", "I");
    if (JavaCPP_positionFieldID == NULL || e->ExceptionCheck()) {
        JavaCPP_log("Error getting position field ID of Pointer class.");
        return 0;
    }
    JavaCPP_capacityFieldID = e->GetFieldID(JavaCPP_getClass(e, 3), "capacity", "I");
    if (JavaCPP_capacityFieldID == NULL || e->ExceptionCheck()) {
        JavaCPP_log("Error getting capacity field ID of Pointer class.");
        return 0;
    }
#ifdef ANDROID
#endif
    return e->GetVersion();
}

JNIEXPORT void JNICALL JNI_OnUnload(JavaVM* vm, void* reserved) {
    JNIEnv* e;
    if (vm->GetEnv((void**)&e, JNI_VERSION_1_6) != JNI_OK) {
        JavaCPP_log("Could not get JNIEnv for JNI_VERSION_1_6 inside JNI_OnUnLoad().");
        return;
    }
    for (int i = 0; i < 17; i++) {
        e->DeleteWeakGlobalRef(JavaCPP_classes[i]);
        JavaCPP_classes[i] = NULL;
    }
    JavaCPP_vm = NULL;
}

JNIEXPORT void JNICALL Java_com_googlecode_javacpp_Pointer_00024ReferenceDeallocator_deallocate(JNIEnv* e, jobject o, jlong p0, jlong p1) {
    void* allocatedAddress = jlong_to_ptr(p0);
    void (*deallocatorAddress)(void*) = (void(*)(void*))jlong_to_ptr(p1);
    if (deallocatorAddress != NULL && allocatedAddress != NULL) {
        (*deallocatorAddress)(allocatedAddress);
    }
}


JNIEXPORT jobject JNICALL Java_com_googlecode_javacpp_Pointer_asDirectBuffer(JNIEnv* e, jobject o) {
    char* pointer = (char*)jlong_to_ptr(e->GetLongField(o, JavaCPP_addressFieldID));
    if (pointer == NULL) {
        e->ThrowNew(JavaCPP_getClass(e, 1), "This pointer address is NULL.");
        return 0;
    }
    jint position = e->GetIntField(o, JavaCPP_positionFieldID);
    pointer += position;
    jint capacity = e->GetIntField(o, JavaCPP_capacityFieldID);
    jobject r = NULL;
    char* rpointer;
    rpointer = pointer;
    if (rpointer != NULL) {
        r = e->NewDirectByteBuffer(rpointer, capacity);
    }
    return r;
}

JNIEXPORT jbyte JNICALL Java_com_googlecode_javacpp_BytePointer_get__I(JNIEnv* e, jobject o, jint p0) {
    signed char* pointer = (signed char*)jlong_to_ptr(e->GetLongField(o, JavaCPP_addressFieldID));
    if (pointer == NULL) {
        e->ThrowNew(JavaCPP_getClass(e, 1), "This pointer address is NULL.");
        return 0;
    }
    jint position = e->GetIntField(o, JavaCPP_positionFieldID);
    pointer += position;
    jbyte r = 0;
    signed char rvalue = pointer[p0];
    r = (jbyte)rvalue;
    return r;
}
JNIEXPORT jobject JNICALL Java_com_googlecode_javacpp_BytePointer_get___3BII(JNIEnv* e, jobject o, jbyteArray p0, jint p1, jint p2) {
    signed char* pointer = (signed char*)jlong_to_ptr(e->GetLongField(o, JavaCPP_addressFieldID));
    if (pointer == NULL) {
        e->ThrowNew(JavaCPP_getClass(e, 1), "This pointer address is NULL.");
        return 0;
    }
    jint position = e->GetIntField(o, JavaCPP_positionFieldID);
    pointer += position;
    signed char* pointer0 = p0 == NULL ? NULL : (jbyte*)e->GetPrimitiveArrayCritical(p0, NULL);
    jobject r = o;
    memcpy(pointer0 + p1, pointer, p2 * sizeof(*pointer0));
    if (p0 != NULL) e->ReleasePrimitiveArrayCritical(p0, pointer0, 0);
    return r;
}
JNIEXPORT jobject JNICALL Java_com_googlecode_javacpp_BytePointer_put__IB(JNIEnv* e, jobject o, jint p0, jbyte p1) {
    signed char* pointer = (signed char*)jlong_to_ptr(e->GetLongField(o, JavaCPP_addressFieldID));
    if (pointer == NULL) {
        e->ThrowNew(JavaCPP_getClass(e, 1), "This pointer address is NULL.");
        return 0;
    }
    jint position = e->GetIntField(o, JavaCPP_positionFieldID);
    pointer += position;
    jobject r = o;
    pointer[p0] = p1;
    return r;
}
JNIEXPORT jobject JNICALL Java_com_googlecode_javacpp_BytePointer_put___3BII(JNIEnv* e, jobject o, jbyteArray p0, jint p1, jint p2) {
    signed char* pointer = (signed char*)jlong_to_ptr(e->GetLongField(o, JavaCPP_addressFieldID));
    if (pointer == NULL) {
        e->ThrowNew(JavaCPP_getClass(e, 1), "This pointer address is NULL.");
        return 0;
    }
    jint position = e->GetIntField(o, JavaCPP_positionFieldID);
    pointer += position;
    signed char* pointer0 = p0 == NULL ? NULL : (jbyte*)e->GetPrimitiveArrayCritical(p0, NULL);
    jobject r = o;
    memcpy(pointer, pointer0 + p1, p2 * sizeof(*pointer0));
    if (p0 != NULL) e->ReleasePrimitiveArrayCritical(p0, pointer0, 0);
    return r;
}
JNIEXPORT void JNICALL Java_com_googlecode_javacpp_BytePointer_allocateArray(JNIEnv* e, jobject o, jint p0) {
    if (!e->IsSameObject(e->GetObjectClass(o), JavaCPP_getClass(e, 4))) {
        return;
    }
    try {
        signed char* rpointer = new signed char[p0];
        jint rcapacity = p0;
        jvalue args[3];
        args[0].j = ptr_to_jlong(rpointer);
        args[1].i = rcapacity;
        args[2].j = ptr_to_jlong(&JavaCPP_com_googlecode_javacpp_BytePointer_deallocateArray);
        e->CallNonvirtualVoidMethodA(o, JavaCPP_getClass(e, 3), JavaCPP_initMethodID, args);
    } catch (...) {
        JavaCPP_handleException(e);
    }
}

JNIEXPORT jshort JNICALL Java_com_googlecode_javacpp_ShortPointer_get__I(JNIEnv* e, jobject o, jint p0) {
    short* pointer = (short*)jlong_to_ptr(e->GetLongField(o, JavaCPP_addressFieldID));
    if (pointer == NULL) {
        e->ThrowNew(JavaCPP_getClass(e, 1), "This pointer address is NULL.");
        return 0;
    }
    jint position = e->GetIntField(o, JavaCPP_positionFieldID);
    pointer += position;
    jshort r = 0;
    short rvalue = pointer[p0];
    r = (jshort)rvalue;
    return r;
}
JNIEXPORT jobject JNICALL Java_com_googlecode_javacpp_ShortPointer_get___3SII(JNIEnv* e, jobject o, jshortArray p0, jint p1, jint p2) {
    short* pointer = (short*)jlong_to_ptr(e->GetLongField(o, JavaCPP_addressFieldID));
    if (pointer == NULL) {
        e->ThrowNew(JavaCPP_getClass(e, 1), "This pointer address is NULL.");
        return 0;
    }
    jint position = e->GetIntField(o, JavaCPP_positionFieldID);
    pointer += position;
    short* pointer0 = p0 == NULL ? NULL : (jshort*)e->GetPrimitiveArrayCritical(p0, NULL);
    jobject r = o;
    memcpy(pointer0 + p1, pointer, p2 * sizeof(*pointer0));
    if (p0 != NULL) e->ReleasePrimitiveArrayCritical(p0, pointer0, 0);
    return r;
}
JNIEXPORT jobject JNICALL Java_com_googlecode_javacpp_ShortPointer_put__IS(JNIEnv* e, jobject o, jint p0, jshort p1) {
    short* pointer = (short*)jlong_to_ptr(e->GetLongField(o, JavaCPP_addressFieldID));
    if (pointer == NULL) {
        e->ThrowNew(JavaCPP_getClass(e, 1), "This pointer address is NULL.");
        return 0;
    }
    jint position = e->GetIntField(o, JavaCPP_positionFieldID);
    pointer += position;
    jobject r = o;
    pointer[p0] = p1;
    return r;
}
JNIEXPORT jobject JNICALL Java_com_googlecode_javacpp_ShortPointer_put___3SII(JNIEnv* e, jobject o, jshortArray p0, jint p1, jint p2) {
    short* pointer = (short*)jlong_to_ptr(e->GetLongField(o, JavaCPP_addressFieldID));
    if (pointer == NULL) {
        e->ThrowNew(JavaCPP_getClass(e, 1), "This pointer address is NULL.");
        return 0;
    }
    jint position = e->GetIntField(o, JavaCPP_positionFieldID);
    pointer += position;
    short* pointer0 = p0 == NULL ? NULL : (jshort*)e->GetPrimitiveArrayCritical(p0, NULL);
    jobject r = o;
    memcpy(pointer, pointer0 + p1, p2 * sizeof(*pointer0));
    if (p0 != NULL) e->ReleasePrimitiveArrayCritical(p0, pointer0, 0);
    return r;
}
JNIEXPORT void JNICALL Java_com_googlecode_javacpp_ShortPointer_allocateArray(JNIEnv* e, jobject o, jint p0) {
    if (!e->IsSameObject(e->GetObjectClass(o), JavaCPP_getClass(e, 5))) {
        return;
    }
    try {
        short* rpointer = new short[p0];
        jint rcapacity = p0;
        jvalue args[3];
        args[0].j = ptr_to_jlong(rpointer);
        args[1].i = rcapacity;
        args[2].j = ptr_to_jlong(&JavaCPP_com_googlecode_javacpp_ShortPointer_deallocateArray);
        e->CallNonvirtualVoidMethodA(o, JavaCPP_getClass(e, 3), JavaCPP_initMethodID, args);
    } catch (...) {
        JavaCPP_handleException(e);
    }
}

JNIEXPORT jint JNICALL Java_com_googlecode_javacpp_IntPointer_get__I(JNIEnv* e, jobject o, jint p0) {
    int* pointer = (int*)jlong_to_ptr(e->GetLongField(o, JavaCPP_addressFieldID));
    if (pointer == NULL) {
        e->ThrowNew(JavaCPP_getClass(e, 1), "This pointer address is NULL.");
        return 0;
    }
    jint position = e->GetIntField(o, JavaCPP_positionFieldID);
    pointer += position;
    jint r = 0;
    int rvalue = pointer[p0];
    r = (jint)rvalue;
    return r;
}
JNIEXPORT jobject JNICALL Java_com_googlecode_javacpp_IntPointer_get___3III(JNIEnv* e, jobject o, jintArray p0, jint p1, jint p2) {
    int* pointer = (int*)jlong_to_ptr(e->GetLongField(o, JavaCPP_addressFieldID));
    if (pointer == NULL) {
        e->ThrowNew(JavaCPP_getClass(e, 1), "This pointer address is NULL.");
        return 0;
    }
    jint position = e->GetIntField(o, JavaCPP_positionFieldID);
    pointer += position;
    int* pointer0 = p0 == NULL ? NULL : (jint*)e->GetPrimitiveArrayCritical(p0, NULL);
    jobject r = o;
    memcpy(pointer0 + p1, pointer, p2 * sizeof(*pointer0));
    if (p0 != NULL) e->ReleasePrimitiveArrayCritical(p0, pointer0, 0);
    return r;
}
JNIEXPORT jobject JNICALL Java_com_googlecode_javacpp_IntPointer_put__II(JNIEnv* e, jobject o, jint p0, jint p1) {
    int* pointer = (int*)jlong_to_ptr(e->GetLongField(o, JavaCPP_addressFieldID));
    if (pointer == NULL) {
        e->ThrowNew(JavaCPP_getClass(e, 1), "This pointer address is NULL.");
        return 0;
    }
    jint position = e->GetIntField(o, JavaCPP_positionFieldID);
    pointer += position;
    jobject r = o;
    pointer[p0] = p1;
    return r;
}
JNIEXPORT jobject JNICALL Java_com_googlecode_javacpp_IntPointer_put___3III(JNIEnv* e, jobject o, jintArray p0, jint p1, jint p2) {
    int* pointer = (int*)jlong_to_ptr(e->GetLongField(o, JavaCPP_addressFieldID));
    if (pointer == NULL) {
        e->ThrowNew(JavaCPP_getClass(e, 1), "This pointer address is NULL.");
        return 0;
    }
    jint position = e->GetIntField(o, JavaCPP_positionFieldID);
    pointer += position;
    int* pointer0 = p0 == NULL ? NULL : (jint*)e->GetPrimitiveArrayCritical(p0, NULL);
    jobject r = o;
    memcpy(pointer, pointer0 + p1, p2 * sizeof(*pointer0));
    if (p0 != NULL) e->ReleasePrimitiveArrayCritical(p0, pointer0, 0);
    return r;
}
JNIEXPORT void JNICALL Java_com_googlecode_javacpp_IntPointer_allocateArray(JNIEnv* e, jobject o, jint p0) {
    if (!e->IsSameObject(e->GetObjectClass(o), JavaCPP_getClass(e, 6))) {
        return;
    }
    try {
        int* rpointer = new int[p0];
        jint rcapacity = p0;
        jvalue args[3];
        args[0].j = ptr_to_jlong(rpointer);
        args[1].i = rcapacity;
        args[2].j = ptr_to_jlong(&JavaCPP_com_googlecode_javacpp_IntPointer_deallocateArray);
        e->CallNonvirtualVoidMethodA(o, JavaCPP_getClass(e, 3), JavaCPP_initMethodID, args);
    } catch (...) {
        JavaCPP_handleException(e);
    }
}

JNIEXPORT jlong JNICALL Java_com_googlecode_javacpp_LongPointer_get__I(JNIEnv* e, jobject o, jint p0) {
    jlong* pointer = (jlong*)jlong_to_ptr(e->GetLongField(o, JavaCPP_addressFieldID));
    if (pointer == NULL) {
        e->ThrowNew(JavaCPP_getClass(e, 1), "This pointer address is NULL.");
        return 0;
    }
    jint position = e->GetIntField(o, JavaCPP_positionFieldID);
    pointer += position;
    jlong r = 0;
    jlong rvalue = pointer[p0];
    r = (jlong)rvalue;
    return r;
}
JNIEXPORT jobject JNICALL Java_com_googlecode_javacpp_LongPointer_get___3JII(JNIEnv* e, jobject o, jlongArray p0, jint p1, jint p2) {
    jlong* pointer = (jlong*)jlong_to_ptr(e->GetLongField(o, JavaCPP_addressFieldID));
    if (pointer == NULL) {
        e->ThrowNew(JavaCPP_getClass(e, 1), "This pointer address is NULL.");
        return 0;
    }
    jint position = e->GetIntField(o, JavaCPP_positionFieldID);
    pointer += position;
    jlong* pointer0 = p0 == NULL ? NULL : (jlong*)e->GetPrimitiveArrayCritical(p0, NULL);
    jobject r = o;
    memcpy(pointer0 + p1, pointer, p2 * sizeof(*pointer0));
    if (p0 != NULL) e->ReleasePrimitiveArrayCritical(p0, pointer0, 0);
    return r;
}
JNIEXPORT jobject JNICALL Java_com_googlecode_javacpp_LongPointer_put__IJ(JNIEnv* e, jobject o, jint p0, jlong p1) {
    jlong* pointer = (jlong*)jlong_to_ptr(e->GetLongField(o, JavaCPP_addressFieldID));
    if (pointer == NULL) {
        e->ThrowNew(JavaCPP_getClass(e, 1), "This pointer address is NULL.");
        return 0;
    }
    jint position = e->GetIntField(o, JavaCPP_positionFieldID);
    pointer += position;
    jobject r = o;
    pointer[p0] = p1;
    return r;
}
JNIEXPORT jobject JNICALL Java_com_googlecode_javacpp_LongPointer_put___3JII(JNIEnv* e, jobject o, jlongArray p0, jint p1, jint p2) {
    jlong* pointer = (jlong*)jlong_to_ptr(e->GetLongField(o, JavaCPP_addressFieldID));
    if (pointer == NULL) {
        e->ThrowNew(JavaCPP_getClass(e, 1), "This pointer address is NULL.");
        return 0;
    }
    jint position = e->GetIntField(o, JavaCPP_positionFieldID);
    pointer += position;
    jlong* pointer0 = p0 == NULL ? NULL : (jlong*)e->GetPrimitiveArrayCritical(p0, NULL);
    jobject r = o;
    memcpy(pointer, pointer0 + p1, p2 * sizeof(*pointer0));
    if (p0 != NULL) e->ReleasePrimitiveArrayCritical(p0, pointer0, 0);
    return r;
}
JNIEXPORT void JNICALL Java_com_googlecode_javacpp_LongPointer_allocateArray(JNIEnv* e, jobject o, jint p0) {
    if (!e->IsSameObject(e->GetObjectClass(o), JavaCPP_getClass(e, 7))) {
        return;
    }
    try {
        jlong* rpointer = new jlong[p0];
        jint rcapacity = p0;
        jvalue args[3];
        args[0].j = ptr_to_jlong(rpointer);
        args[1].i = rcapacity;
        args[2].j = ptr_to_jlong(&JavaCPP_com_googlecode_javacpp_LongPointer_deallocateArray);
        e->CallNonvirtualVoidMethodA(o, JavaCPP_getClass(e, 3), JavaCPP_initMethodID, args);
    } catch (...) {
        JavaCPP_handleException(e);
    }
}

JNIEXPORT jfloat JNICALL Java_com_googlecode_javacpp_FloatPointer_get__I(JNIEnv* e, jobject o, jint p0) {
    float* pointer = (float*)jlong_to_ptr(e->GetLongField(o, JavaCPP_addressFieldID));
    if (pointer == NULL) {
        e->ThrowNew(JavaCPP_getClass(e, 1), "This pointer address is NULL.");
        return 0;
    }
    jint position = e->GetIntField(o, JavaCPP_positionFieldID);
    pointer += position;
    jfloat r = 0;
    float rvalue = pointer[p0];
    r = (jfloat)rvalue;
    return r;
}
JNIEXPORT jobject JNICALL Java_com_googlecode_javacpp_FloatPointer_get___3FII(JNIEnv* e, jobject o, jfloatArray p0, jint p1, jint p2) {
    float* pointer = (float*)jlong_to_ptr(e->GetLongField(o, JavaCPP_addressFieldID));
    if (pointer == NULL) {
        e->ThrowNew(JavaCPP_getClass(e, 1), "This pointer address is NULL.");
        return 0;
    }
    jint position = e->GetIntField(o, JavaCPP_positionFieldID);
    pointer += position;
    float* pointer0 = p0 == NULL ? NULL : (jfloat*)e->GetPrimitiveArrayCritical(p0, NULL);
    jobject r = o;
    memcpy(pointer0 + p1, pointer, p2 * sizeof(*pointer0));
    if (p0 != NULL) e->ReleasePrimitiveArrayCritical(p0, pointer0, 0);
    return r;
}
JNIEXPORT jobject JNICALL Java_com_googlecode_javacpp_FloatPointer_put__IF(JNIEnv* e, jobject o, jint p0, jfloat p1) {
    float* pointer = (float*)jlong_to_ptr(e->GetLongField(o, JavaCPP_addressFieldID));
    if (pointer == NULL) {
        e->ThrowNew(JavaCPP_getClass(e, 1), "This pointer address is NULL.");
        return 0;
    }
    jint position = e->GetIntField(o, JavaCPP_positionFieldID);
    pointer += position;
    jobject r = o;
    pointer[p0] = p1;
    return r;
}
JNIEXPORT jobject JNICALL Java_com_googlecode_javacpp_FloatPointer_put___3FII(JNIEnv* e, jobject o, jfloatArray p0, jint p1, jint p2) {
    float* pointer = (float*)jlong_to_ptr(e->GetLongField(o, JavaCPP_addressFieldID));
    if (pointer == NULL) {
        e->ThrowNew(JavaCPP_getClass(e, 1), "This pointer address is NULL.");
        return 0;
    }
    jint position = e->GetIntField(o, JavaCPP_positionFieldID);
    pointer += position;
    float* pointer0 = p0 == NULL ? NULL : (jfloat*)e->GetPrimitiveArrayCritical(p0, NULL);
    jobject r = o;
    memcpy(pointer, pointer0 + p1, p2 * sizeof(*pointer0));
    if (p0 != NULL) e->ReleasePrimitiveArrayCritical(p0, pointer0, 0);
    return r;
}
JNIEXPORT void JNICALL Java_com_googlecode_javacpp_FloatPointer_allocateArray(JNIEnv* e, jobject o, jint p0) {
    if (!e->IsSameObject(e->GetObjectClass(o), JavaCPP_getClass(e, 8))) {
        return;
    }
    try {
        float* rpointer = new float[p0];
        jint rcapacity = p0;
        jvalue args[3];
        args[0].j = ptr_to_jlong(rpointer);
        args[1].i = rcapacity;
        args[2].j = ptr_to_jlong(&JavaCPP_com_googlecode_javacpp_FloatPointer_deallocateArray);
        e->CallNonvirtualVoidMethodA(o, JavaCPP_getClass(e, 3), JavaCPP_initMethodID, args);
    } catch (...) {
        JavaCPP_handleException(e);
    }
}

JNIEXPORT jdouble JNICALL Java_com_googlecode_javacpp_DoublePointer_get__I(JNIEnv* e, jobject o, jint p0) {
    double* pointer = (double*)jlong_to_ptr(e->GetLongField(o, JavaCPP_addressFieldID));
    if (pointer == NULL) {
        e->ThrowNew(JavaCPP_getClass(e, 1), "This pointer address is NULL.");
        return 0;
    }
    jint position = e->GetIntField(o, JavaCPP_positionFieldID);
    pointer += position;
    jdouble r = 0;
    double rvalue = pointer[p0];
    r = (jdouble)rvalue;
    return r;
}
JNIEXPORT jobject JNICALL Java_com_googlecode_javacpp_DoublePointer_get___3DII(JNIEnv* e, jobject o, jdoubleArray p0, jint p1, jint p2) {
    double* pointer = (double*)jlong_to_ptr(e->GetLongField(o, JavaCPP_addressFieldID));
    if (pointer == NULL) {
        e->ThrowNew(JavaCPP_getClass(e, 1), "This pointer address is NULL.");
        return 0;
    }
    jint position = e->GetIntField(o, JavaCPP_positionFieldID);
    pointer += position;
    double* pointer0 = p0 == NULL ? NULL : (jdouble*)e->GetPrimitiveArrayCritical(p0, NULL);
    jobject r = o;
    memcpy(pointer0 + p1, pointer, p2 * sizeof(*pointer0));
    if (p0 != NULL) e->ReleasePrimitiveArrayCritical(p0, pointer0, 0);
    return r;
}
JNIEXPORT jobject JNICALL Java_com_googlecode_javacpp_DoublePointer_put__ID(JNIEnv* e, jobject o, jint p0, jdouble p1) {
    double* pointer = (double*)jlong_to_ptr(e->GetLongField(o, JavaCPP_addressFieldID));
    if (pointer == NULL) {
        e->ThrowNew(JavaCPP_getClass(e, 1), "This pointer address is NULL.");
        return 0;
    }
    jint position = e->GetIntField(o, JavaCPP_positionFieldID);
    pointer += position;
    jobject r = o;
    pointer[p0] = p1;
    return r;
}
JNIEXPORT jobject JNICALL Java_com_googlecode_javacpp_DoublePointer_put___3DII(JNIEnv* e, jobject o, jdoubleArray p0, jint p1, jint p2) {
    double* pointer = (double*)jlong_to_ptr(e->GetLongField(o, JavaCPP_addressFieldID));
    if (pointer == NULL) {
        e->ThrowNew(JavaCPP_getClass(e, 1), "This pointer address is NULL.");
        return 0;
    }
    jint position = e->GetIntField(o, JavaCPP_positionFieldID);
    pointer += position;
    double* pointer0 = p0 == NULL ? NULL : (jdouble*)e->GetPrimitiveArrayCritical(p0, NULL);
    jobject r = o;
    memcpy(pointer, pointer0 + p1, p2 * sizeof(*pointer0));
    if (p0 != NULL) e->ReleasePrimitiveArrayCritical(p0, pointer0, 0);
    return r;
}
JNIEXPORT void JNICALL Java_com_googlecode_javacpp_DoublePointer_allocateArray(JNIEnv* e, jobject o, jint p0) {
    if (!e->IsSameObject(e->GetObjectClass(o), JavaCPP_getClass(e, 9))) {
        return;
    }
    try {
        double* rpointer = new double[p0];
        jint rcapacity = p0;
        jvalue args[3];
        args[0].j = ptr_to_jlong(rpointer);
        args[1].i = rcapacity;
        args[2].j = ptr_to_jlong(&JavaCPP_com_googlecode_javacpp_DoublePointer_deallocateArray);
        e->CallNonvirtualVoidMethodA(o, JavaCPP_getClass(e, 3), JavaCPP_initMethodID, args);
    } catch (...) {
        JavaCPP_handleException(e);
    }
}

JNIEXPORT jchar JNICALL Java_com_googlecode_javacpp_CharPointer_get__I(JNIEnv* e, jobject o, jint p0) {
    unsigned short* pointer = (unsigned short*)jlong_to_ptr(e->GetLongField(o, JavaCPP_addressFieldID));
    if (pointer == NULL) {
        e->ThrowNew(JavaCPP_getClass(e, 1), "This pointer address is NULL.");
        return 0;
    }
    jint position = e->GetIntField(o, JavaCPP_positionFieldID);
    pointer += position;
    jchar r = 0;
    unsigned short rvalue = pointer[p0];
    r = (jchar)rvalue;
    return r;
}
JNIEXPORT jobject JNICALL Java_com_googlecode_javacpp_CharPointer_get___3CII(JNIEnv* e, jobject o, jcharArray p0, jint p1, jint p2) {
    unsigned short* pointer = (unsigned short*)jlong_to_ptr(e->GetLongField(o, JavaCPP_addressFieldID));
    if (pointer == NULL) {
        e->ThrowNew(JavaCPP_getClass(e, 1), "This pointer address is NULL.");
        return 0;
    }
    jint position = e->GetIntField(o, JavaCPP_positionFieldID);
    pointer += position;
    unsigned short* pointer0 = p0 == NULL ? NULL : (jchar*)e->GetPrimitiveArrayCritical(p0, NULL);
    jobject r = o;
    memcpy(pointer0 + p1, pointer, p2 * sizeof(*pointer0));
    if (p0 != NULL) e->ReleasePrimitiveArrayCritical(p0, pointer0, 0);
    return r;
}
JNIEXPORT jobject JNICALL Java_com_googlecode_javacpp_CharPointer_put__IC(JNIEnv* e, jobject o, jint p0, jchar p1) {
    unsigned short* pointer = (unsigned short*)jlong_to_ptr(e->GetLongField(o, JavaCPP_addressFieldID));
    if (pointer == NULL) {
        e->ThrowNew(JavaCPP_getClass(e, 1), "This pointer address is NULL.");
        return 0;
    }
    jint position = e->GetIntField(o, JavaCPP_positionFieldID);
    pointer += position;
    jobject r = o;
    pointer[p0] = p1;
    return r;
}
JNIEXPORT jobject JNICALL Java_com_googlecode_javacpp_CharPointer_put___3CII(JNIEnv* e, jobject o, jcharArray p0, jint p1, jint p2) {
    unsigned short* pointer = (unsigned short*)jlong_to_ptr(e->GetLongField(o, JavaCPP_addressFieldID));
    if (pointer == NULL) {
        e->ThrowNew(JavaCPP_getClass(e, 1), "This pointer address is NULL.");
        return 0;
    }
    jint position = e->GetIntField(o, JavaCPP_positionFieldID);
    pointer += position;
    unsigned short* pointer0 = p0 == NULL ? NULL : (jchar*)e->GetPrimitiveArrayCritical(p0, NULL);
    jobject r = o;
    memcpy(pointer, pointer0 + p1, p2 * sizeof(*pointer0));
    if (p0 != NULL) e->ReleasePrimitiveArrayCritical(p0, pointer0, 0);
    return r;
}
JNIEXPORT void JNICALL Java_com_googlecode_javacpp_CharPointer_allocateArray(JNIEnv* e, jobject o, jint p0) {
    if (!e->IsSameObject(e->GetObjectClass(o), JavaCPP_getClass(e, 10))) {
        return;
    }
    try {
        unsigned short* rpointer = new unsigned short[p0];
        jint rcapacity = p0;
        jvalue args[3];
        args[0].j = ptr_to_jlong(rpointer);
        args[1].i = rcapacity;
        args[2].j = ptr_to_jlong(&JavaCPP_com_googlecode_javacpp_CharPointer_deallocateArray);
        e->CallNonvirtualVoidMethodA(o, JavaCPP_getClass(e, 3), JavaCPP_initMethodID, args);
    } catch (...) {
        JavaCPP_handleException(e);
    }
}

JNIEXPORT jobject JNICALL Java_com_googlecode_javacpp_PointerPointer_get(JNIEnv* e, jobject o, jint p0) {
    void** pointer = (void**)jlong_to_ptr(e->GetLongField(o, JavaCPP_addressFieldID));
    if (pointer == NULL) {
        e->ThrowNew(JavaCPP_getClass(e, 1), "This pointer address is NULL.");
        return 0;
    }
    jint position = e->GetIntField(o, JavaCPP_positionFieldID);
    pointer += position;
    jobject r = NULL;
    void* rpointer;
    rpointer = pointer[p0];
    if (rpointer != NULL) {
        r = e->AllocObject(JavaCPP_getClass(e, 3));
        e->SetLongField(r, JavaCPP_addressFieldID, ptr_to_jlong(rpointer));
    }
    return r;
}
JNIEXPORT jobject JNICALL Java_com_googlecode_javacpp_PointerPointer_put(JNIEnv* e, jobject o, jint p0, jobject p1) {
    void** pointer = (void**)jlong_to_ptr(e->GetLongField(o, JavaCPP_addressFieldID));
    if (pointer == NULL) {
        e->ThrowNew(JavaCPP_getClass(e, 1), "This pointer address is NULL.");
        return 0;
    }
    jint position = e->GetIntField(o, JavaCPP_positionFieldID);
    pointer += position;
    void* pointer1 = p1 == NULL ? NULL : (void*)jlong_to_ptr(e->GetLongField(p1, JavaCPP_addressFieldID));
    jobject r = o;
    pointer[p0] = pointer1;
    return r;
}
JNIEXPORT void JNICALL Java_com_googlecode_javacpp_PointerPointer_allocateArray(JNIEnv* e, jobject o, jint p0) {
    if (!e->IsSameObject(e->GetObjectClass(o), JavaCPP_getClass(e, 11))) {
        return;
    }
    try {
        void** rpointer = new void*[p0];
        jint rcapacity = p0;
        jvalue args[3];
        args[0].j = ptr_to_jlong(rpointer);
        args[1].i = rcapacity;
        args[2].j = ptr_to_jlong(&JavaCPP_com_googlecode_javacpp_PointerPointer_deallocateArray);
        e->CallNonvirtualVoidMethodA(o, JavaCPP_getClass(e, 3), JavaCPP_initMethodID, args);
    } catch (...) {
        JavaCPP_handleException(e);
    }
}

JNIEXPORT jboolean JNICALL Java_com_googlecode_javacpp_BoolPointer_get(JNIEnv* e, jobject o, jint p0) {
    bool* pointer = (bool*)jlong_to_ptr(e->GetLongField(o, JavaCPP_addressFieldID));
    if (pointer == NULL) {
        e->ThrowNew(JavaCPP_getClass(e, 1), "This pointer address is NULL.");
        return 0;
    }
    jint position = e->GetIntField(o, JavaCPP_positionFieldID);
    pointer += position;
    jboolean r = 0;
    unsigned char rvalue = pointer[p0];
    r = (jboolean)rvalue;
    return r;
}
JNIEXPORT jobject JNICALL Java_com_googlecode_javacpp_BoolPointer_put(JNIEnv* e, jobject o, jint p0, jboolean p1) {
    bool* pointer = (bool*)jlong_to_ptr(e->GetLongField(o, JavaCPP_addressFieldID));
    if (pointer == NULL) {
        e->ThrowNew(JavaCPP_getClass(e, 1), "This pointer address is NULL.");
        return 0;
    }
    jint position = e->GetIntField(o, JavaCPP_positionFieldID);
    pointer += position;
    jobject r = o;
    pointer[p0] = (bool)p1;
    return r;
}
JNIEXPORT void JNICALL Java_com_googlecode_javacpp_BoolPointer_allocateArray(JNIEnv* e, jobject o, jint p0) {
    if (!e->IsSameObject(e->GetObjectClass(o), JavaCPP_getClass(e, 12))) {
        return;
    }
    try {
        bool* rpointer = new bool[p0];
        jint rcapacity = p0;
        jvalue args[3];
        args[0].j = ptr_to_jlong(rpointer);
        args[1].i = rcapacity;
        args[2].j = ptr_to_jlong(&JavaCPP_com_googlecode_javacpp_BoolPointer_deallocateArray);
        e->CallNonvirtualVoidMethodA(o, JavaCPP_getClass(e, 3), JavaCPP_initMethodID, args);
    } catch (...) {
        JavaCPP_handleException(e);
    }
}

JNIEXPORT jlong JNICALL Java_com_googlecode_javacpp_CLongPointer_get(JNIEnv* e, jobject o, jint p0) {
    long* pointer = (long*)jlong_to_ptr(e->GetLongField(o, JavaCPP_addressFieldID));
    if (pointer == NULL) {
        e->ThrowNew(JavaCPP_getClass(e, 1), "This pointer address is NULL.");
        return 0;
    }
    jint position = e->GetIntField(o, JavaCPP_positionFieldID);
    pointer += position;
    jlong r = 0;
    jlong rvalue = pointer[p0];
    r = (jlong)rvalue;
    return r;
}
JNIEXPORT jobject JNICALL Java_com_googlecode_javacpp_CLongPointer_put(JNIEnv* e, jobject o, jint p0, jlong p1) {
    long* pointer = (long*)jlong_to_ptr(e->GetLongField(o, JavaCPP_addressFieldID));
    if (pointer == NULL) {
        e->ThrowNew(JavaCPP_getClass(e, 1), "This pointer address is NULL.");
        return 0;
    }
    jint position = e->GetIntField(o, JavaCPP_positionFieldID);
    pointer += position;
    jobject r = o;
    pointer[p0] = (long)p1;
    return r;
}
JNIEXPORT void JNICALL Java_com_googlecode_javacpp_CLongPointer_allocateArray(JNIEnv* e, jobject o, jint p0) {
    if (!e->IsSameObject(e->GetObjectClass(o), JavaCPP_getClass(e, 13))) {
        return;
    }
    try {
        long* rpointer = new long[p0];
        jint rcapacity = p0;
        jvalue args[3];
        args[0].j = ptr_to_jlong(rpointer);
        args[1].i = rcapacity;
        args[2].j = ptr_to_jlong(&JavaCPP_com_googlecode_javacpp_CLongPointer_deallocateArray);
        e->CallNonvirtualVoidMethodA(o, JavaCPP_getClass(e, 3), JavaCPP_initMethodID, args);
    } catch (...) {
        JavaCPP_handleException(e);
    }
}

JNIEXPORT jlong JNICALL Java_com_googlecode_javacpp_SizeTPointer_get(JNIEnv* e, jobject o, jint p0) {
    size_t* pointer = (size_t*)jlong_to_ptr(e->GetLongField(o, JavaCPP_addressFieldID));
    if (pointer == NULL) {
        e->ThrowNew(JavaCPP_getClass(e, 1), "This pointer address is NULL.");
        return 0;
    }
    jint position = e->GetIntField(o, JavaCPP_positionFieldID);
    pointer += position;
    jlong r = 0;
    jlong rvalue = pointer[p0];
    r = (jlong)rvalue;
    return r;
}
JNIEXPORT jobject JNICALL Java_com_googlecode_javacpp_SizeTPointer_put(JNIEnv* e, jobject o, jint p0, jlong p1) {
    size_t* pointer = (size_t*)jlong_to_ptr(e->GetLongField(o, JavaCPP_addressFieldID));
    if (pointer == NULL) {
        e->ThrowNew(JavaCPP_getClass(e, 1), "This pointer address is NULL.");
        return 0;
    }
    jint position = e->GetIntField(o, JavaCPP_positionFieldID);
    pointer += position;
    jobject r = o;
    pointer[p0] = (size_t)p1;
    return r;
}
JNIEXPORT void JNICALL Java_com_googlecode_javacpp_SizeTPointer_allocateArray(JNIEnv* e, jobject o, jint p0) {
    if (!e->IsSameObject(e->GetObjectClass(o), JavaCPP_getClass(e, 14))) {
        return;
    }
    try {
        size_t* rpointer = new size_t[p0];
        jint rcapacity = p0;
        jvalue args[3];
        args[0].j = ptr_to_jlong(rpointer);
        args[1].i = rcapacity;
        args[2].j = ptr_to_jlong(&JavaCPP_com_googlecode_javacpp_SizeTPointer_deallocateArray);
        e->CallNonvirtualVoidMethodA(o, JavaCPP_getClass(e, 3), JavaCPP_initMethodID, args);
    } catch (...) {
        JavaCPP_handleException(e);
    }
}

JNIEXPORT void JNICALL Java_gpugen_ThrustLib_00024TupleIntInt_allocate(JNIEnv* e, jobject o) {
    if (!e->IsSameObject(e->GetObjectClass(o), JavaCPP_getClass(e, 15))) {
        return;
    }
    try {
        thrust::tuple<int, int>* rpointer = new thrust::tuple<int, int>();
        jint rcapacity = 1;
        jvalue args[3];
        args[0].j = ptr_to_jlong(rpointer);
        args[1].i = rcapacity;
        args[2].j = ptr_to_jlong(&JavaCPP_gpugen_ThrustLib_00024TupleIntInt_deallocate);
        e->CallNonvirtualVoidMethodA(o, JavaCPP_getClass(e, 3), JavaCPP_initMethodID, args);
    } catch (...) {
        JavaCPP_handleException(e);
    }
}

JNIEXPORT jint JNICALL Java_gpugen_ThrustLib_00024DeviceVectorPointer_get(JNIEnv* e, jobject o, jlong p0) {
    thrust::device_vector<int>* pointer = (thrust::device_vector<int>*)jlong_to_ptr(e->GetLongField(o, JavaCPP_addressFieldID));
    if (pointer == NULL) {
        e->ThrowNew(JavaCPP_getClass(e, 1), "This pointer address is NULL.");
        return 0;
    }
    jint position = e->GetIntField(o, JavaCPP_positionFieldID);
    pointer += position;
    jint r = 0;
    try {
        int rvalue = pointer->operator[](p0);
        r = (jint)rvalue;
    } catch (...) {
        JavaCPP_handleException(e);
    }
    return r;
}
JNIEXPORT jlong JNICALL Java_gpugen_ThrustLib_00024DeviceVectorPointer_size(JNIEnv* e, jobject o) {
    thrust::device_vector<int>* pointer = (thrust::device_vector<int>*)jlong_to_ptr(e->GetLongField(o, JavaCPP_addressFieldID));
    if (pointer == NULL) {
        e->ThrowNew(JavaCPP_getClass(e, 1), "This pointer address is NULL.");
        return 0;
    }
    jint position = e->GetIntField(o, JavaCPP_positionFieldID);
    pointer += position;
    jlong r = 0;
    try {
        jlong rvalue = pointer->size();
        r = (jlong)rvalue;
    } catch (...) {
        JavaCPP_handleException(e);
    }
    return r;
}
JNIEXPORT jobject JNICALL Java_gpugen_ThrustLib_00024DeviceVectorPointer_copy(JNIEnv* e, jobject o, jobject p0) {
    thrust::device_vector<int>* pointer = (thrust::device_vector<int>*)jlong_to_ptr(e->GetLongField(o, JavaCPP_addressFieldID));
    if (pointer == NULL) {
        e->ThrowNew(JavaCPP_getClass(e, 1), "This pointer address is NULL.");
        return 0;
    }
    jint position = e->GetIntField(o, JavaCPP_positionFieldID);
    pointer += position;
    thrust::device_vector<int>* pointer0 = p0 == NULL ? NULL : (thrust::device_vector<int>*)jlong_to_ptr(e->GetLongField(p0, JavaCPP_addressFieldID));
    if (pointer0 == NULL) {
        e->ThrowNew(JavaCPP_getClass(e, 1), "Pointer address of parameter 0 is NULL.");
        return 0;
    }
    jint position0 = p0 == NULL ? 0 : e->GetIntField(p0, JavaCPP_positionFieldID);
    pointer0 += position0;
    jobject r = NULL;
    thrust::device_vector<int>* rpointer;
    try {
        rpointer = &pointer->operator=(*pointer0);
        if (rpointer == pointer) {
            r = o;
        } else if (rpointer != NULL) {
            r = e->AllocObject(JavaCPP_getClass(e, 16));
            e->SetLongField(r, JavaCPP_addressFieldID, ptr_to_jlong(rpointer));
        }
    } catch (...) {
        JavaCPP_handleException(e);
    }
    return r;
}
JNIEXPORT jboolean JNICALL Java_gpugen_ThrustLib_00024DeviceVectorPointer_empty(JNIEnv* e, jobject o) {
    thrust::device_vector<int>* pointer = (thrust::device_vector<int>*)jlong_to_ptr(e->GetLongField(o, JavaCPP_addressFieldID));
    if (pointer == NULL) {
        e->ThrowNew(JavaCPP_getClass(e, 1), "This pointer address is NULL.");
        return 0;
    }
    jint position = e->GetIntField(o, JavaCPP_positionFieldID);
    pointer += position;
    jboolean r = 0;
    try {
        bool rvalue = pointer->empty();
        r = (jboolean)rvalue;
    } catch (...) {
        JavaCPP_handleException(e);
    }
    return r;
}
JNIEXPORT void JNICALL Java_gpugen_ThrustLib_00024DeviceVectorPointer_resize(JNIEnv* e, jobject o, jlong p0) {
    thrust::device_vector<int>* pointer = (thrust::device_vector<int>*)jlong_to_ptr(e->GetLongField(o, JavaCPP_addressFieldID));
    if (pointer == NULL) {
        e->ThrowNew(JavaCPP_getClass(e, 1), "This pointer address is NULL.");
        return;
    }
    jint position = e->GetIntField(o, JavaCPP_positionFieldID);
    pointer += position;
    try {
        pointer->resize(p0);
    } catch (...) {
        JavaCPP_handleException(e);
    }
}
JNIEXPORT void JNICALL Java_gpugen_ThrustLib_00024DeviceVectorPointer_allocate__(JNIEnv* e, jobject o) {
    if (!e->IsSameObject(e->GetObjectClass(o), JavaCPP_getClass(e, 16))) {
        return;
    }
    try {
        thrust::device_vector<int>* rpointer = new thrust::device_vector<int>();
        jint rcapacity = 1;
        jvalue args[3];
        args[0].j = ptr_to_jlong(rpointer);
        args[1].i = rcapacity;
        args[2].j = ptr_to_jlong(&JavaCPP_gpugen_ThrustLib_00024DeviceVectorPointer_deallocate);
        e->CallNonvirtualVoidMethodA(o, JavaCPP_getClass(e, 3), JavaCPP_initMethodID, args);
    } catch (...) {
        JavaCPP_handleException(e);
    }
}
JNIEXPORT void JNICALL Java_gpugen_ThrustLib_00024DeviceVectorPointer_allocate__J(JNIEnv* e, jobject o, jlong p0) {
    if (!e->IsSameObject(e->GetObjectClass(o), JavaCPP_getClass(e, 16))) {
        return;
    }
    try {
        thrust::device_vector<int>* rpointer = new thrust::device_vector<int>(p0);
        jint rcapacity = 1;
        jvalue args[3];
        args[0].j = ptr_to_jlong(rpointer);
        args[1].i = rcapacity;
        args[2].j = ptr_to_jlong(&JavaCPP_gpugen_ThrustLib_00024DeviceVectorPointer_deallocate);
        e->CallNonvirtualVoidMethodA(o, JavaCPP_getClass(e, 3), JavaCPP_initMethodID, args);
    } catch (...) {
        JavaCPP_handleException(e);
    }
}
JNIEXPORT void JNICALL Java_gpugen_ThrustLib_00024DeviceVectorPointer_push_1back(JNIEnv* e, jobject o, jint p0) {
    thrust::device_vector<int>* pointer = (thrust::device_vector<int>*)jlong_to_ptr(e->GetLongField(o, JavaCPP_addressFieldID));
    if (pointer == NULL) {
        e->ThrowNew(JavaCPP_getClass(e, 1), "This pointer address is NULL.");
        return;
    }
    jint position = e->GetIntField(o, JavaCPP_positionFieldID);
    pointer += position;
    try {
        pointer->push_back(p0);
    } catch (...) {
        JavaCPP_handleException(e);
    }
}
JNIEXPORT jint JNICALL Java_gpugen_ThrustLib_00024DeviceVectorPointer_front(JNIEnv* e, jobject o) {
    thrust::device_vector<int>* pointer = (thrust::device_vector<int>*)jlong_to_ptr(e->GetLongField(o, JavaCPP_addressFieldID));
    if (pointer == NULL) {
        e->ThrowNew(JavaCPP_getClass(e, 1), "This pointer address is NULL.");
        return 0;
    }
    jint position = e->GetIntField(o, JavaCPP_positionFieldID);
    pointer += position;
    jint r = 0;
    try {
        int rvalue = pointer->front();
        r = (jint)rvalue;
    } catch (...) {
        JavaCPP_handleException(e);
    }
    return r;
}
JNIEXPORT void JNICALL Java_gpugen_ThrustLib_00024DeviceVectorPointer_pop_1back(JNIEnv* e, jobject o) {
    thrust::device_vector<int>* pointer = (thrust::device_vector<int>*)jlong_to_ptr(e->GetLongField(o, JavaCPP_addressFieldID));
    if (pointer == NULL) {
        e->ThrowNew(JavaCPP_getClass(e, 1), "This pointer address is NULL.");
        return;
    }
    jint position = e->GetIntField(o, JavaCPP_positionFieldID);
    pointer += position;
    try {
        pointer->pop_back();
    } catch (...) {
        JavaCPP_handleException(e);
    }
}
JNIEXPORT jint JNICALL Java_gpugen_ThrustLib_00024DeviceVectorPointer_DeviceVectorPointer1(JNIEnv* e, jobject o, jintArray p0) {
    thrust::device_vector<int>* pointer = (thrust::device_vector<int>*)jlong_to_ptr(e->GetLongField(o, JavaCPP_addressFieldID));
    if (pointer == NULL) {
        e->ThrowNew(JavaCPP_getClass(e, 1), "This pointer address is NULL.");
        return 0;
    }
    jint position = e->GetIntField(o, JavaCPP_positionFieldID);
    pointer += position;
    int* pointer0 = p0 == NULL ? NULL : e->GetIntArrayElements(p0, NULL);
    jint capacity0 = p0 == NULL ? 0 : e->GetArrayLength(p0);
    ArrayAdapter adapter0(pointer0, capacity0);
    jint r = 0;
    try {
        int rvalue = pointer->someFun(adapter0);
        r = (jint)rvalue;
        if (p0 != NULL) e->ReleaseIntArrayElements(p0, pointer0, 0);
    } catch (...) {
        JavaCPP_handleException(e);
    }
    return r;
}

JNIEXPORT jint JNICALL Java_gpugen_ThrustLib_test(JNIEnv* e, jclass c, jobject p0) {
    thrust::device_vector<int>* pointer0 = p0 == NULL ? NULL : (thrust::device_vector<int>*)jlong_to_ptr(e->GetLongField(p0, JavaCPP_addressFieldID));
    jint position0 = p0 == NULL ? 0 : e->GetIntField(p0, JavaCPP_positionFieldID);
    pointer0 += position0;
    jint r = 0;
    try {
        int rvalue = test(pointer0);
        r = (jint)rvalue;
    } catch (...) {
        JavaCPP_handleException(e);
    }
    return r;
}
JNIEXPORT jobject JNICALL Java_gpugen_ThrustLib_makeTuple(JNIEnv* e, jclass c, jint p0, jint p1) {
    jobject r = NULL;
    thrust::tuple<int, int>* rpointer;
    try {
        rpointer = new thrust::tuple<int, int>(thrust::make_tuple<int, int>(p0, p1));
        jint rcapacity = 1;
        jlong deallocator = ptr_to_jlong(&JavaCPP_gpugen_ThrustLib_00024TupleIntInt_deallocate);
        if (rpointer != NULL) {
            r = e->AllocObject(JavaCPP_getClass(e, 15));
            if (deallocator != 0) {
                jvalue args[3];
                args[0].j = ptr_to_jlong(rpointer);
                args[1].i = rcapacity;
                args[2].j = deallocator;
                e->CallNonvirtualVoidMethodA(r, JavaCPP_getClass(e, 3), JavaCPP_initMethodID, args);
            } else {
                e->SetLongField(r, JavaCPP_addressFieldID, ptr_to_jlong(rpointer));
                e->SetIntField(r, JavaCPP_capacityFieldID, rcapacity);
            }
        }
    } catch (...) {
        JavaCPP_handleException(e);
    }
    return r;
}
JNIEXPORT jint JNICALL Java_gpugen_ThrustLib_get0(JNIEnv* e, jclass c, jobject p0) {
    thrust::tuple<int, int>* pointer0 = p0 == NULL ? NULL : (thrust::tuple<int, int>*)jlong_to_ptr(e->GetLongField(p0, JavaCPP_addressFieldID));
    if (pointer0 == NULL) {
        e->ThrowNew(JavaCPP_getClass(e, 1), "Pointer address of parameter 0 is NULL.");
        return 0;
    }
    jint position0 = p0 == NULL ? 0 : e->GetIntField(p0, JavaCPP_positionFieldID);
    pointer0 += position0;
    jint r = 0;
    try {
        int rvalue = thrust::get<0>(*pointer0);
        r = (jint)rvalue;
    } catch (...) {
        JavaCPP_handleException(e);
    }
    return r;
}
JNIEXPORT jint JNICALL Java_gpugen_ThrustLib_get1(JNIEnv* e, jclass c, jobject p0) {
    thrust::tuple<int, int>* pointer0 = p0 == NULL ? NULL : (thrust::tuple<int, int>*)jlong_to_ptr(e->GetLongField(p0, JavaCPP_addressFieldID));
    if (pointer0 == NULL) {
        e->ThrowNew(JavaCPP_getClass(e, 1), "Pointer address of parameter 0 is NULL.");
        return 0;
    }
    jint position0 = p0 == NULL ? 0 : e->GetIntField(p0, JavaCPP_positionFieldID);
    pointer0 += position0;
    jint r = 0;
    try {
        int rvalue = thrust::get<1>(*pointer0);
        r = (jint)rvalue;
    } catch (...) {
        JavaCPP_handleException(e);
    }
    return r;
}

}

