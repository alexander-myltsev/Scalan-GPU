% The following returns the path of a tree from a node to its root %
FUNCTION TREE_PATH(node, bfs_tree) =
let next = bfs_tree[node];
in 
    if (next == node) then [node]
    else [node] ++ TREE_PATH(next,bfs_tree) $

FUNCTION BFS(graph, frontier_nodes, bfs_tree, end_node) =
  % terminate when either there are no more nodes in the frontier or you
    find the end node %
if (#frontier_nodes == 0) or 
   any({node==end_node: node in frontier_nodes}) 
then bfs_tree
else 
    let 
	% get all the neighbors of the current frontier %
	neighbors = graph->frontier_nodes;

	% tag the neighbors with the node they came from and flatten %
	next = flatten({{(ne,n): ne}
			: n in frontier_nodes; ne in neighbors});

	% remove the neighbors that have already been searched %
	next = {ne in next
		; p in bfs_tree->{ne:(ne,n) in next} 
		| p == -1};

	% write into the bfs_tree the back pointers %
	bfs_tree = bfs_tree<-next;

	% remove duplicates by checking if you were written %
	next = {ne: (ne,n) in next
		; p in bfs_tree->{ne:(ne,n) in next}
		| n == p}

    % recurse %
    in BFS(graph, next, bfs_tree, end_node) $

node = 4;
bfs_tree = 
    let
	graph = [[1],[0,2,3],[1,4],[1],[2]];
	bfs_tree = [0,-1,-1,-1,-1];
	frontier_nodes = [0];
    in BFS(graph, frontier_nodes, bfs_tree, node);
TREE_PATH(node, bfs_tree);
    
%--- initial: ---%
graph = [[1],[0,2,3],[1,4],[1],[2]];
bfs_tree = [-1,1,-1,-1,-1];
frontier_nodes = [1];

%--- 1st: ---%
neighbors = graph->frontier_nodes;
% tag the neighbors with the node they came from and flatten %
next1 = flatten({{(ne,n): ne} : n in frontier_nodes; ne in neighbors});
% remove the neighbors that have already been searched %
next2 = {ne in next1 ; p in bfs_tree->{ne:(ne,n) in next1} | p == -1};
bfs_tree1 = bfs_tree<-next2;
next3 = {ne: (ne,n) in next2 ; p in bfs_tree1->{ne:(ne,n) in next2} | n == p};

%--- 1st iteration, result: ---%
graph = [[1], [0, 2, 3], [1, 4], [1], [2]] : [[int]]
bfs_tree = [-1, 1, -1, -1, -1] : [int]
frontier_nodes = [1] : [int]
neighbors = [[0, 2, 3]] : [[int]]
next1 = [(0, 1), (2, 1), (3, 1)] : [(int, int)]
next2 = [(0, 1), (2, 1), (3, 1)] : [(int, int)]
bfs_tree1 = [1, 1, 1, 1, -1] : [int]
next3 = [0, 2, 3] : [int]
Bye.

%--- 2nd: ---%
graph = [[1],[0,2,3],[1,4],[1],[2]];
frontier_nodes = [0,2,3];
bfs_tree=[1,1,1,1,-1];
neighbors = graph->frontier_nodes;
% tag the neighbors with the node they came from and flatten %
next1 = flatten({{(ne,n): ne} : n in frontier_nodes; ne in neighbors});
% remove the neighbors that have already been searched %
next2 = {ne in next1 ; p in bfs_tree->{ne:(ne,n) in next1} | p == -1};
bfs_tree1 = bfs_tree<-next2;
next3 = {ne: (ne,n) in next2 ; p in bfs_tree1->{ne:(ne,n) in next2} | n == p};

%--- 2nd iteration: ---%
graph = [[1], [0, 2, 3], [1, 4], [1], [2]] : [[int]]
frontier_nodes = [0, 2, 3] : [int]
bfs_tree = [1, 1, 1, 1, -1] : [int]
neighbors = [[1], [1, 4], [1]] : [[int]]
next1 = [(1, 0), (1, 2), (4, 2), (1, 3)] : [(int, int)]
next2 = [(4, 2)] : [(int, int)]
bfs_tree1 = [1, 1, 1, 1, 2] : [int]
next3 = [4] : [int]
Bye.

TREE_PATH(4, bfs_tree) = [4,2,1]: [int]